/*

Cleaning Data in SQL Queries

*/


Select *
From PortfolioDataCleaning.dbo.NashvilleHousing

Select SaleDate
From PortfolioDataCleaning.dbo.NashvilleHousing

--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format

Select saleDate, CONVERT(Date,SaleDate)
From PortfolioDataCleaning.dbo.NashvilleHousing

Update PortfolioDataCleaning.dbo.NashvilleHousing
SET SaleDate = CONVERT(Date,SaleDate)


--ALTER TABLE PortfolioDataCleaning.dbo.NashvilleHousing
--ADD SaleDateConverted Date;

--UPDATE PortfolioDataCleaning.dbo.NashvilleHousing
--SET SaleDateConverted = CONVERT(Date,SaleDate)
 
--ALTER TABLE PortfolioDataCleaning.dbo.NashvilleHousing
--DROP COLUMN SaleDateConverted


 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

SELECT PropertyAddress
FROM PortfolioDataCleaning.dbo.NashvilleHousing
WHERE PropertyAddress IS NULL

SELECT *
FROM PortfolioDataCleaning.dbo.NashvilleHousing
--WHERE PropertyAddress IS NULL
ORDER BY ParcelID 


-- If parcelID is same then property adress also same. So update PropertyAdress

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM PortfolioDataCleaning.dbo.NashvilleHousing a
JOIN PortfolioDataCleaning.dbo.NashvilleHousing b
	ON a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM PortfolioDataCleaning.dbo.NashvilleHousing a
JOIN PortfolioDataCleaning.dbo.NashvilleHousing b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
WHERE a.PropertyAddress IS NULL

--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State) Property adress


SELECT PropertyAddress
FROM PortfolioDataCleaning.dbo.NashvilleHousing
--Where PropertyAddress is null
ORDER BY ParcelID

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address

From PortfolioDataCleaning.dbo.NashvilleHousing


ALTER TABLE NashvilleHousing
Add PropertySplitAddress Nvarchar(255);

Update PortfolioDataCleaning.dbo.NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )


ALTER TABLE NashvilleHousing
Add PropertySplitCity Nvarchar(255);

Update PortfolioDataCleaning.dbo.NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))



Select *
From PortfolioDataCleaning.dbo.NashvilleHousing


------------------------------------------------------------------------------------------------
--Breaking out Address into Individual Columns (Address, City, State) for OwnerAdress

Select OwnerAddress
From PortfolioDataCleaning.dbo.NashvilleHousing


Select
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3),
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2),
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
From PortfolioDataCleaning.dbo.NashvilleHousing



ALTER TABLE NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update PortfolioDataCleaning.dbo.NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE NashvilleHousing
Add OwnerSplitCity Nvarchar(255);

Update PortfolioDataCleaning.dbo.NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)



ALTER TABLE NashvilleHousing
Add OwnerSplitState Nvarchar(255);

Update PortfolioDataCleaning.dbo.NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)


Select *
From PortfolioDataCleaning.dbo.NashvilleHousing

--------------------------------------------------------------------------------------------------------------------------

-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct(SoldAsVacant)
From PortfolioDataCleaning.dbo.NashvilleHousing

Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From PortfolioDataCleaning.dbo.NashvilleHousing
Group by SoldAsVacant
order by 2


Select SoldAsVacant,
CASE When SoldAsVacant = 'Y' THEN 'Yes'
	 When SoldAsVacant = 'N' THEN 'No'
	 ELSE SoldAsVacant
	 END
From PortfolioDataCleaning.dbo.NashvilleHousing


Update PortfolioDataCleaning.dbo.NashvilleHousing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
						When SoldAsVacant = 'N' THEN 'No'
						ELSE SoldAsVacant
						END


-----------------------------------------------------------------------------------------------------------------------------------------------------------

--Select all duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) AS row_num

From PortfolioDataCleaning.dbo.NashvilleHousing
--order by ParcelID
)
Select *
From RowNumCTE
Where row_num > 1
Order by PropertyAddress


-- Remove Duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) AS row_num

From PortfolioDataCleaning.dbo.NashvilleHousing
--order by ParcelID
)
DELETE
FROM RowNumCTE
Where row_num > 1
--ORDER BY PropertyAddress



Select *
From PortfolioDataCleaning.dbo.NashvilleHousing


---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns

Select *
From PortfolioDataCleaning.dbo.NashvilleHousing


ALTER TABLE PortfolioDataCleaning.dbo.NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate


Select OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
From PortfolioDataCleaning.dbo.NashvilleHousing

















